plugins {
    id 'java'
}

group = 'com.peckot.bukkit'
version = '2.0.0'

repositories {
    maven {
        name = "aliyun-central"
        url = "https://maven.aliyun.com/repository/central"
    }
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.12-R0.1-SNAPSHOT'
    compileOnly 'me.clip:placeholderapi:2.11.3'
    implementation 'org.xerial:sqlite-jdbc:3.42.0.0'
    implementation 'com.alibaba.fastjson2:fastjson2:2.0.38'
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
    filesMatching('config.yml') {
        expand props
    }
}

tasks.register('buildJar', Jar) {
    duplicatesStrategy = 'EXCLUDE'
    from sourceSets.main.output
    from processResources
    from configurations.runtimeClasspath.getFiles().collect {
        it.isDirectory() ? it : zipTree(it)
    }
    archiveClassifier.set('')
    manifest {
        attributes 'Main-Class': 'com.peckot.bukkit.PremiumCheck.PremiumCheck'
    }
    with jar
}
