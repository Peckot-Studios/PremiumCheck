name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'adopt'
          architecture: x64
          check-latest: false
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GITHUB_TOKEN
          overwrite-settings: true
          job-status: success

      - name: Extract version from build.gradle
        id: extract_version
        run: echo "::set-output name=version::$(grep -oP '(?<=version\s\').*?(?=\')' build.gradle)"

      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Build JAR
        run: ./gradlew buildJar

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          release_name: Release v${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload JAR to Release
        id: upload_jar
        uses: actions/upload-artifact@v2
        with:
          name: PremiumCheck-v${{ steps.extract_version.outputs.version }}.jar
          path: build/libs/PremiumCheck-v${{ steps.extract_version.outputs.version }}.jar

      - name: Set Release Description
        id: set_release_description
        uses: actions/github-script@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseId = "${{ steps.create_release.outputs.id }}";
            const releaseName = "${{ steps.extract_version.outputs.version }}";
            const response = await github.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: `v${releaseName}`
            });
            const releaseBody = `Release Notes for v${releaseName}:\n\n` + response.data.body;
            await github.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: releaseBody
            });
